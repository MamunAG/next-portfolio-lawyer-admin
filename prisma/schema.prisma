// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//auth=================================================================================
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  BlogMaster BlogMaster[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

//end-auth ===================================================================================

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  isActive Boolean    @default(true)
  BlogTags BlogTags[]
}

model BlogMaster {
  id           Int           @id @default(autoincrement())
  title        String        @unique
  composedById String?
  composedBy   User?         @relation(fields: [composedById], references: [id])
  composedDate DateTime?
  isPublished  Boolean?      @default(false)
  BlogDetails  BlogDetails[]
  BlogTags     BlogTags[]
}

model BlogDetails {
  id           Int         @id @default(autoincrement())
  masterId     Int
  blogMst      BlogMaster? @relation(fields: [masterId], references: [id])
  sectionType  String
  imagePreview String?
  text         String?
  sortingNo    Int         @default(0)
}

model BlogTags {
  id      Int         @id @default(autoincrement())
  blogId  Int
  blogMst BlogMaster? @relation(fields: [blogId], references: [id])
  tagId   Int
  tag     Tag?        @relation(fields: [tagId], references: [id])
}

model HireMe {
  id          Int      @id @default(autoincrement())
  name        String
  email       String?
  contact     String
  address     String?
  createdDate DateTime
}

model ContactMessage {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  subject     String?
  message     String?
  createdDate DateTime
}
